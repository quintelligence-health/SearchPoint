package si.ijs.searchpointsrv.servlet;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import si.ijs.searchpoint.SearchPoint;
import si.ijs.searchpointsrv.config.Configuration;

/**
 * Servlet implementation class RankServlet
 */
@WebServlet("/rank")
public class RankServlet extends HttpServlet {
	
	private static final long serialVersionUID = -3150319959431107958L;
	
	private static final Logger log = Logger.getLogger(QueryServlet.class.getName());

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			String queryId = request.getParameter(Configuration.QUERY_ID_PARAM);
			int page = request.getParameterMap().containsKey(Configuration.PAGE_PARAM) ? Integer.parseInt(request.getParameter(Configuration.PAGE_PARAM)) : 0;
			String clustering = request.getParameter(Configuration.CLUSTERING_PARAM);
			int limit = request.getParameterMap().containsKey(Configuration.LIMIT_PARAM) ? Integer.parseInt(request.getParameter(Configuration.LIMIT_PARAM)) : Configuration.DEFAULT_LIMIT;
			
			String result = SearchPoint.getInstance().processQuery(query, clustering, limit);
			
			if (log.isLoggable(Level.INFO))
				log.info("Finished serving: " + result);
			
			response.getWriter().write(result);
		} catch (Throwable t) {
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
	}
}
